/*
 * PDF Generator API
 * # Introduction PDF Generator API allows you easily generate transactional PDF documents and reduce the development and support costs by enabling your users to create and manage their document templates using a browser-based drag-and-drop document editor.  The PDF Generator API features a web API architecture, allowing you to code in the language of your choice. This API supports the JSON media type, and uses UTF-8 character encoding.  # Authentication The PDF Generator API uses __JSON Web Tokens (JWT)__ to authenticate all API requests. These tokens offer a method to establish secure server-to-server authentication by transferring a compact JSON object with a signed payload of your accountâ€™s API Key and Secret. When authenticating to the PDF Generator API, a JWT should be generated uniquely by a __server-side application__ and included as a __Bearer Token__ in the header of each request.  <SecurityDefinitions />  ## Accessing your API Key and Secret You can find your __API Key__ and __API Secret__ from the __Account Settings__ page after you login to PDF Generator API [here](https://pdfgeneratorapi.com/login).  ## Creating a JWT JSON Web Tokens are composed of three sections: a header, a payload (containing a claim set), and a signature. The header and payload are JSON objects, which are serialized to UTF-8 bytes, then encoded using base64url encoding.  The JWT's header, payload, and signature are concatenated with periods (.). As a result, a JWT typically takes the following form: ``` {Base64url encoded header}.{Base64url encoded payload}.{Base64url encoded signature} ```  We recommend and support libraries provided on [jwt.io](https://jwt.io/). While other libraries can create JWT, these recommended libraries are the most robust.  ### Header Property `alg` defines which signing algorithm is being used. PDF Generator API users HS256. Property `typ` defines the type of token and it is always JWT. ``` {   \"alg\": \"HS256\",   \"typ\": \"JWT\" } ```  ### Payload The second part of the token is the payload, which contains the claims  or the pieces of information being passed about the user and any metadata required. It is mandatory to specify the following claims: * issuer (`iss`): Your API key * subject (`sub`): Workspace identifier  You can also specify the token expiration time (`exp`) which is timestamp in seconds since Epoch (unix epoch time). It is highly recommended to set the exp timestamp for a short period, i.e. a matter of seconds. This way, if a token is intercepted or shared, the token will only be valid for a short period of time.  ``` {   \"iss\": \"ad54aaff89ffdfeff178bb8a8f359b29fcb20edb56250b9f584aa2cb0162ed4a\",   \"sub\": \"demo.example@actualreports.com\",   \"exp\": 1586112639 } ```  ### Signature To create the signature part you have to take the encoded header, the encoded payload, a secret, the algorithm specified in the header, and sign that. The signature is used to verify the message wasn't changed along the way, and, in the case of tokens signed with a private key, it can also verify that the sender of the JWT is who it says it is. ``` HMACSHA256(     base64UrlEncode(header) + \".\" +     base64UrlEncode(payload),     API_SECRET) ```  ### Putting all together The output is three Base64-URL strings separated by dots. The following shows a JWT that has the previous header and payload encoded, and it is signed with a secret. ``` eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhZDU0YWFmZjg5ZmZkZmVmZjE3OGJiOGE4ZjM1OWIyOWZjYjIwZWRiNTYyNTBiOWY1ODRhYTJjYjAxNjJlZDRhIiwic3ViIjoiZGVtby5leGFtcGxlQGFjdHVhbHJlcG9ydHMuY29tIn0.SxO-H7UYYYsclS8RGWO1qf0z1cB1m73wF9FLl9RCc1Q  // Base64 encoded header: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9 // Base64 encoded payload: eyJpc3MiOiJhZDU0YWFmZjg5ZmZkZmVmZjE3OGJiOGE4ZjM1OWIyOWZjYjIwZWRiNTYyNTBiOWY1ODRhYTJjYjAxNjJlZDRhIiwic3ViIjoiZGVtby5leGFtcGxlQGFjdHVhbHJlcG9ydHMuY29tIn0 // Signature: SxO-H7UYYYsclS8RGWO1qf0z1cB1m73wF9FLl9RCc1Q ```  ## Testing with JWTs You can create a temporary token in [Account Settings](https://pdfgeneratorapi.com/account/organization) page after you login to PDF Generator API. The generated token uses your email address as the subject (`sub`) value and is valid for __5 minutes__. You can also use [jwt.io](https://jwt.io/) to generate test tokens for your API calls. These test tokens should never be used in production applications.  # Libraries and SDKs ## Postman Collection We have created a [Postman](https://www.postman.com) Collection so you can easily test all the API endpoints wihtout developing and code. You can download the collection [here](https://app.getpostman.com/run-collection/8f99146f64819f3e6db5) or just click the button below.  [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/8f99146f64819f3e6db5) 
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: support@pdfgeneratorapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.pdfgeneratorapi.client.api;

import org.pdfgeneratorapi.client.ApiException;
import org.pdfgeneratorapi.client.model.InlineResponse200;
import org.pdfgeneratorapi.client.model.InlineResponse2001;
import org.pdfgeneratorapi.client.model.InlineResponse2002;
import org.pdfgeneratorapi.client.model.InlineResponse2003;
import org.pdfgeneratorapi.client.model.InlineResponse2004;
import org.pdfgeneratorapi.client.model.InlineResponse401;
import org.pdfgeneratorapi.client.model.InlineResponse403;
import org.pdfgeneratorapi.client.model.InlineResponse404;
import org.pdfgeneratorapi.client.model.InlineResponse422;
import org.pdfgeneratorapi.client.model.InlineResponse500;
import org.pdfgeneratorapi.client.model.TemplateDefinitionNew;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TemplatesApi
 */
@Ignore
public class TemplatesApiTest {

    private final TemplatesApi api = new TemplatesApi();

    
    /**
     * Copy template
     *
     * Creates a copy of a template to the workspace specified in authentication parameters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyTemplateTest() throws ApiException {
        Integer templateId = null;
        String name = null;
        InlineResponse2001 response = api.copyTemplate(templateId, name);

        // TODO: test validations
    }
    
    /**
     * Create template
     *
     * Creates a new template. If template configuration is not specified in the request body then an empty template is created. Template is placed to the workspace specified in authentication params. Template configuration must be sent in the request body.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTemplateTest() throws ApiException {
        TemplateDefinitionNew templateDefinitionNew = null;
        InlineResponse2001 response = api.createTemplate(templateDefinitionNew);

        // TODO: test validations
    }
    
    /**
     * Delete template
     *
     * Deletes the template from workspace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTemplateTest() throws ApiException {
        Integer templateId = null;
        InlineResponse2002 response = api.deleteTemplate(templateId);

        // TODO: test validations
    }
    
    /**
     * Open editor
     *
     * Returns an unique URL which you can use to redirect your user to the editor form your application or use the generated URL as iframe source to show the editor within your application. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEditorUrlTest() throws ApiException {
        Integer templateId = null;
        Object body = null;
        String language = null;
        InlineResponse2003 response = api.getEditorUrl(templateId, body, language);

        // TODO: test validations
    }
    
    /**
     * Get template
     *
     * Returns template configuration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTemplateTest() throws ApiException {
        Integer templateId = null;
        InlineResponse2001 response = api.getTemplate(templateId);

        // TODO: test validations
    }
    
    /**
     * Get templates
     *
     * Returns a list of templates available for the authenticated workspace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTemplatesTest() throws ApiException {
        InlineResponse200 response = api.getTemplates();

        // TODO: test validations
    }
    
    /**
     * Merge template
     *
     * Merges template with data and returns base64 encoded document or a public URL to a document. You can send json encoded data in request body or a public URL to your json file as the data parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeTemplateTest() throws ApiException {
        Integer templateId = null;
        Object body = null;
        String name = null;
        String format = null;
        String output = null;
        InlineResponse2004 response = api.mergeTemplate(templateId, body, name, format, output);

        // TODO: test validations
    }
    
    /**
     * Merge multiple templates
     *
     * Allows to merge multiples template with data and returns base64 encoded document or public url to a document.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeTemplatesTest() throws ApiException {
        List<Object> requestBody = null;
        String name = null;
        String format = null;
        String output = null;
        InlineResponse2004 response = api.mergeTemplates(requestBody, name, format, output);

        // TODO: test validations
    }
    
    /**
     * Update template
     *
     * Updates template configuration. The template configuration for pages and layout must be complete as the entire configuration is replaced and not merged.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTemplateTest() throws ApiException {
        Integer templateId = null;
        TemplateDefinitionNew templateDefinitionNew = null;
        InlineResponse2001 response = api.updateTemplate(templateId, templateDefinitionNew);

        // TODO: test validations
    }
    
}
